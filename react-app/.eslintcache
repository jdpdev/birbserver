[{"/home/pi/Documents/Projects/birbserver/react-app/src/index.js":"1","/home/pi/Documents/Projects/birbserver/react-app/src/reportWebVitals.js":"2","/home/pi/Documents/Projects/birbserver/react-app/src/App.js":"3","/home/pi/Documents/Projects/birbserver/react-app/src/PreviewSizer.js":"4"},{"size":500,"mtime":1610419430178,"results":"5","hashOfConfig":"6"},{"size":362,"mtime":1610419430178,"results":"7","hashOfConfig":"6"},{"size":5789,"mtime":1625665414834,"results":"8","hashOfConfig":"6"},{"size":1879,"mtime":1625665539431,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1xjgz55",{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"14","messages":"15","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},"/home/pi/Documents/Projects/birbserver/react-app/src/index.js",[],"/home/pi/Documents/Projects/birbserver/react-app/src/reportWebVitals.js",[],"/home/pi/Documents/Projects/birbserver/react-app/src/App.js",["20","21","22","23","24","25"],"import React, {useState, useEffect} from 'react'\nimport classnames from 'classnames'\nimport {parse, differenceInSeconds, format} from 'date-fns'\nimport \"./App.css\"\nimport { PreviewSizer, PreviewSizes } from './PreviewSizer';\n\nfunction App() {\n  const [birdPics, setBirdPics] = useState([]);\n  const [picDates, setPicDates] = useState([]);\n  const [picGroups, setPicGroups] = useState([]);\n  const [viewImage, setViewImage] = useState(null);\n  const [updateTime, setUpdateTime] = useState(Date.now())\n  const [isViewerOpen, setIsViewerOpen] = useState(false);\n  const [previewSize, setPreviewSize] = useState(PreviewSizes.SMALL);\n\n  const nextPicture = () => {\n    let index = birdPics.findIndex(bp => bp.full === viewImage.full);\n    if (index < 0) return\n\n    index++\n\n    if (index < birdPics.length) {\n      setViewImage(birdPics[index])\n    }\n  }\n\n  const previousPicture = () => {\n    let index = birdPics.findIndex(bp => bp.full === viewImage.full);\n    if (index < 0) return\n\n    index--\n\n    if (index > 0) {\n      setViewImage(birdPics[index])\n    }\n  }\n\n  useEffect(() => {\n    fetch('/api/list')\n      .then(r => r.json())\n      .then(d => {\n        processImageList(d, setBirdPics, setPicDates, setPicGroups, setUpdateTime);\n      })\n      .catch(e => setBirdPics([{error: e}]))\n  }, [updateTime])\n\n  return (\n    <>\n      <div className=\"App\">\n        <div className=\"left\">\n          <img src={`/live&${updateTime}`} height=\"600px\" width=\"800px\" />\n          {new Date(updateTime).toLocaleString()}\n        </div>\n        <div className=\"right\">\n          <PreviewSizer \n            previewSize={previewSize}\n            onSetPreviewSize={setPreviewSize}\n          />\n          <ul className=\"preview-scroll\">\n            {\n              picGroups.length > 0 && picGroups.map((pg, i) => (\n                <ImageGroup \n                  key={i} \n                  group={pg}\n                  birdPics={birdPics} \n                  onClick={pic => {\n                    setViewImage(pic)\n                    setIsViewerOpen(true)\n                  }} \n                  selectedPic={viewImage}\n                  previewSize={previewSize}\n                />\n              ))\n            }\n          </ul>\n        </div>\n      </div>\n      <ImageViewer \n        image={viewImage} \n        isOpen={isViewerOpen}\n        onClose={() => setIsViewerOpen(false)} \n        onNext={nextPicture}\n        onPrevious={previousPicture}\n      />\n    </>\n  );\n}\n\nexport function processImageList(d, setBirdPics, setPicDates, setPicGroups, setUpdateTime) {\n  setBirdPics(d)\n\n  setPicGroups(groupPicsByDate(d))\n  setTimeout(() => setUpdateTime(Date.now()), 10000)\n}\n\nfunction ImageGroup({group, birdPics, dates, onClick, selectedPic, previewSize}) {\n  const startDate = new Date(group[0].time * 1000);\n\n  if (startDate == null) {\n    return <div className='image-group'>ERROR!</div>\n  }\n  \n  return (\n    <div className='image-group'>\n      <h5>{format(startDate, \"HH:mm, E LLL d\")}</h5>\n      <div className='group-images'>\n        {  \n          group.map(g => (\n            <ImagePreviewItem \n              key={g.full}\n              birdPic={g}  \n              onClick={() => onClick(g)} \n              isSelected={selectedPic && g && g.full === selectedPic.full} \n              previewSize={previewSize}\n            />))\n        }\n      </div>\n    </div>\n  )\n}\n\nfunction ImageListItem({birdPic, date, onClick, isSelected}) {\n  return (\n    <li \n      className={classnames({'viewed-image': isSelected})}\n      onClick={onClick}\n    >\n      {birdPic.full}\n    </li>\n  )\n}\n\nfunction ImagePreviewItem({birdPic, date, onClick, isSelected, previewSize}) {\n  const classes = classnames('image-preview-item', previewSize, {'is-selected': isSelected});\n  \n  return (\n    <div \n      className={classes}\n      onClick={onClick}\n    >\n      {\n        birdPic != null ?\n        <img \n          src={\"/thumb/\" + birdPic.thumb} \n          alt={`${birdPic.classification[0].species} (${Math.round(birdPic.classification[0].confidence * 100)}%)`}\n        /> :\n        \"error\"\n      }\n    </div>\n  )\n}\n\nfunction ImageViewer({image, isOpen, onClose, onNext, onPrevious}) {\n  const close = () => {\n    onClose();\n  }\n\n  if (!isOpen || image == null) {\n    return <div />\n  }\n\n  return (\n    <div className='image-viewer' onClick={close}>\n      <div className='image-container' onClick={e => e.stopPropagation()}>\n        <div className='close-btn' onClick={close}>close</div>\n        <div className='next-btn' onClick={onNext}><div>{\">\"}</div></div>\n        <div className='image'>\n          <div className='previous-btn' onClick={onPrevious}><div>{\"<\"}</div></div>\n          <img src={`/picture/${image.full}`} width=\"100%\" />\n        </div>\n        <div className='image-info'>\n          <div>\n            <b>{image.classification[0].species}</b> ({Math.round(image.classification[0].confidence * 100)}%)\n          </div>\n          <div>\n            1/{image.shutter} sec, ISO {image.iso}\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction convertNameToDate(name) {\n  const ds = name.substring(0, name.length - 4);\n  const parsed = parse(ds, 'yyyy-MM-dd-HH-mm-ss', new Date());\n  return parsed;\n}\n\nfunction groupPicsByDate(pics) {\n  console.log(`[groupPicsByDate] pic count: ${pics.length}`)\n\n  if (pics.length === 0) {\n    return [];\n  }\n\n  let comparer = pics[0]\n  let currentGroup = [comparer]\n  const groups = []\n\n  for (let i = 1; i < pics.length; i++) {\n    const d = pics[i]\n    const delta = comparer.time - d.time\n\n    if (delta <= 90) {\n      currentGroup.push(d)\n      comparer = d\n    } else {\n      groups.push(currentGroup)\n      currentGroup = [d]\n      comparer = d\n    }\n  }\n\n  groups.push(currentGroup)\n\n  console.log(groups)\n  return groups;\n}\n\nexport default App;\n","/home/pi/Documents/Projects/birbserver/react-app/src/PreviewSizer.js",["26"],"import React from 'react';\n\nimport './PreviewSizer.css'\n\nexport const PreviewSizes = {\n    SMALL: 'small',\n    MEDIUM: 'medium',\n    LARGE: 'large',\n    XLARGE: 'xlarge'\n}\n\nexport function PreviewSizer({previewSize, onSetPreviewSize}) {\n    const onSelectSize = size => {\n        console.log(`select: ${size}`)\n        onSetPreviewSize(size)\n    }\n\n    return (\n        <div class='preview-sizer'>\n            <PreviewSizeItem \n                whichSize={PreviewSizes.SMALL} \n                selectedSize={previewSize} \n                onSelect={onSelectSize}\n            />\n            <PreviewSizeItem \n                whichSize={PreviewSizes.MEDIUM} \n                selectedSize={previewSize} \n                onSelect={onSelectSize}\n            />\n            <PreviewSizeItem \n                whichSize={PreviewSizes.LARGE} \n                selectedSize={previewSize} \n                onSelect={onSelectSize}\n            />\n            <PreviewSizeItem \n                whichSize={PreviewSizes.XLARGE} \n                selectedSize={previewSize} \n                onSelect={onSelectSize}\n            />\n        </div>\n    )\n}\n\nfunction PreviewSizeItem({whichSize, selectedSize, onSelect}) {\n    return (\n        <div \n            class={buildClasses(selectedSize, whichSize)}\n            onClick={() => onSelect(whichSize)}\n        >\n            {buildIcon(whichSize)}\n        </div>\n    )\n}\n\nfunction buildClasses(selection, which) {\n    return `sizer-item ${selection == which ? 'selected' : ''}`;\n}\n\nfunction buildIcon(which) {\n    switch (which) {\n        default:\n        case PreviewSizes.SMALL:    return <i class=\"fas fa-th fa-xs\"></i>;\n        case PreviewSizes.MEDIUM:   return <i class=\"fas fa-th fa-sm\"></i>;\n        case PreviewSizes.LARGE:    return <i class=\"fas fa-th\"></i>;\n        case PreviewSizes.XLARGE:   return <i class=\"fas fa-th-large\"></i>;\n    }\n}",{"ruleId":"27","severity":1,"message":"28","line":3,"column":16,"nodeType":"29","messageId":"30","endLine":3,"endColumn":35},{"ruleId":"27","severity":1,"message":"31","line":9,"column":10,"nodeType":"29","messageId":"30","endLine":9,"endColumn":18},{"ruleId":"32","severity":1,"message":"33","line":51,"column":11,"nodeType":"34","endLine":51,"endColumn":75},{"ruleId":"27","severity":1,"message":"35","line":122,"column":10,"nodeType":"29","messageId":"30","endLine":122,"endColumn":23},{"ruleId":"32","severity":1,"message":"33","line":169,"column":11,"nodeType":"34","endLine":169,"endColumn":62},{"ruleId":"27","severity":1,"message":"36","line":184,"column":10,"nodeType":"29","messageId":"30","endLine":184,"endColumn":27},{"ruleId":"37","severity":1,"message":"38","line":56,"column":36,"nodeType":"39","messageId":"40","endLine":56,"endColumn":38},"no-unused-vars","'differenceInSeconds' is defined but never used.","Identifier","unusedVar","'picDates' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'ImageListItem' is defined but never used.","'convertNameToDate' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected"]